
using System.CommandLine;
using System.CommandLine.Invocation;
using IncrementalGeneratorSamples.Runtime;

#nullable enable

namespace MyNamespace;

public partial class SimplestPractical
{
    internal class CommandHandler : CommandHandlerBase
    {
        // Manage singleton instance
        public static SimplestPractical.CommandHandler Instance { get; } = new SimplestPractical.CommandHandler();

        // Create System.CommandLine options
        

        // Base constructor creates System.CommandLine and optins are added here
        private CommandHandler()
            : base("simplest-practical", "")
        {
            
            
        }

        // The code invoked when the user runs the command
        protected override int Invoke(InvocationContext invocationContext)
        {
            var commandResult = invocationContext.ParseResult.CommandResult;
            var command = new SimplestPractical();
            return command.Execute();
        }
    }
}
